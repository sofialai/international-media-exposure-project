fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage("Hello World")
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInout(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
shinyApp(ui = ui, server = server)
ui <-
fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
View(server)
View(ui)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runApp(“newdir”)
library(shiny)
runApp(“newdir”)
install.packages("runApp")
runApp(“newdir”)
runApp(newdir)
runApp("newdir")
runApp(“newdir”)
library(readr)
boost <- read_csv("Desktop/Research BOOST II/boost.csv")
View(boost)
install.packages("miniUI")
library(miniUI)
install.packages("shinyFiles")
install.packages("cronR")
install.packages("countrycode")
countryname(sourcevar, destination = "country.name", warn = TRUE)
library(countrycode)
countryname(sourcevar, destination = "country.name", warn = TRUE)
countryname(sourcevar, destination = "country.name", warn = TRUE)
countryname("New Zealand", destination = "country.name", warn = TRUE)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runApp('Documents/GitHub/shiny.rstudio.com-tutorial/Shiny practice.R')
shinyApp(ui = ui, server = server)
library(pacman)
pacman::p_load(sf, leaflets, readxl,
dplyr, qtm, ggplot2, rvest, tidyverse,
raster,  tmap, tmaptools)
#raster is for mac
options(scipen = 999)
# Copy the shapefile hyperlink from Natural Earth (naturalearthdata.org) into an object in R
world_file <- "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
# Download .zip
download.file(world_file, destfile = "WORLD.zip")
# Unzip the file
unzip("WORLD.zip")
# Examine the file .zip file to find the shapefile
list.files()
# Save the shapefile as a data frame using the read_sf() function
world <- sf::read_sf("ne_50m_admin_0_countries.shp") #Look for the .shp
world
countries
ggplot() + geom_sf(data = world) + coord_sf(crs = st_crs(4326)) + theme_minimal()
tm_shape(world) +
tm_fill()
tmap_mode("view")
tmap_last()
pacman::p_load(sf, leaflet, readxl,
dplyr, qtm, ggplot2, rvest, tidyverse,
raster,  tmap, tmaptools)
library(pacman)
pacman::p_load(sf, leaflet, readxl,
dplyr, ggplot2, rvest, tidyverse,
raster,  tmap, tmaptools)
#raster is for mac
options(scipen = 999)
tmap_last()
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron")
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(label = labels)
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE)
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron")
library(readr)
fox_news_headlines <- read_csv("Documents/GitHub/Final_Data_Science_Project/fox_news_headlines.csv")
View(fox_news_headlines)
#Put words into one vector
fox_string <- str_c(fox_news_headlines, collapse = " ")
#Make all words lower-case
fox_string <- tolower(fox_string)
fox_string
#Remove punctuation and digits
fox_string <- str_replace_all(fox_string, "[[:punct:]]", " ")
fox_string <- str_replace_all(fox_string, "[[:digit:]]", " ")
fox_string
fox_countries <- str_extract(fox_string, eng_countries)
eng_countries <- c("china","chinese*", "india*", "united states", "america*",
"indonesia*", "pakistan*", "brazil*", "nigeria",  "nigerian", "bangladesh*", "russia*",
"mexic*",  "japan*", "ethiopia*", "philippine*", "filipino*",
"egypt*", "vietnam*", "congo*", "iran*", "turkey*", "turkish", "german*",
"france", "french*", "united kingdom", "uk", "england", "britain", "britains",
"thailand", "thailands", "thai", "south africa*", "tanzan*", "italy", "italys",
"italian", "italians", "myanmar*",
"burmese", "south korea", "korea*", "colombia*", "kenya*", "spain*", "spanish*",
"argentin*", "algeria*", "sudan*", "uganda*", "ukrain*", "iraq", "iraqi",
"canad*", "poland*", "polish*", "morocc*", "uzbekist*", "saudi arabia*",
"arabia*", "peru", "peruvian", "afghanistan", "afghanistani", "afghan", "afghani",
"malaysia", "malaysian", "angola*",
"mozambi*",
"ghana", "ghanaian", "yemen*", "nepal*", "venezuel*", "ivory coast*", "divoire*",
"madagascar*", "malagas*", "australia", "australian", "north korea*", "cameroon*",
"niger", "nigers", "taiwa*", "sri lanka*", "lanka*", "burkin*",
"mali", "malian", "chile", "chilian", "romania*", "kazakhst*", "malawi*", "malawian",
"zambia*", "syria*", "ecuador*", "netherlan*", "dutch*", "seneg*",
"guatema*", "chad", "chadian", "somali*", "zimbab*", "cambodi*", "south sudan*",
"rwand*", "guinea*", "burund*", "benin*", "bolivi*", "tunisia*",
"haiti*", "belgi*", "cuba*", "jordan*", "greece*", "greek*", "czech*",
"dominican republ*", "dominic*", "sweden*", "swed*", "portug*",
"azerbaij*", "hungar*", "tajikist*", "united arab emirates*", "emirat*",
"hondur*", "israel*", "belaru*", "papua new guinea*", "papua*",
"austria", "switzer*", "swiss*", "sierra leone*", "leon*", "togo", "togolese",
"hong kong*", "kong*", "paragu*", "laos", "laotian", "libya", "libyan", "bulgar*",
"serbia", "serb", "el salvador", "salvador*", "leban*", "kyrgyzst*",
"nicarag*", "turkmenist*", "denmark*", "danish*", "congo*",
"central african republic*", "central african*", "finland", "finlands", "finn", "finnish",
"slovak*", "singapor*", "norway", "norwegian", "palestin*", "costa rica*", "new zealand*",
"ireland*", "irish*", "liberi*", "oman", "omani", "kuwait*", "panama*",
"mauritan*", "croati*", "georgia*", "eritr*", "urugu*",
"mongoli*", "bosnia and herzegovina*", "bosni*", "puerto rico*",
"armeni*", "albani*", "lithuani*", "jamaic*", "moldov*", "namibia*",
"gambia*", "botswan*", "motswana", "qatar*", "gabon*", "lesotho*", "mosotho",
"basotho", "sloveni*", "north macedonia*", "macedoni*", "latvi*",
"kosov*", "guinea bissau*", "bissau-guinean*", "equatorial guinea",
"equatoguinean*", "bahrai*", "trinidad and tobago*", "trinidad*", "tobagoni*",
"estoni*", "east timor*", "timorian", "maurit*", "eswatini*", "emaswat*", "liswat*",
"djibout*", "fiji*", "cypr*", "comoros*", "bhuta*", "guyan*", "solomon islands*",
"macau*", "macanese*", "luxembourg*", "montenegr*", "western sahara*", "surinam*",
"cape verd*", "malta*", "maltese*", "transnistr*", "brunei*", "belize", "belizean",
"baham*", "maldiv*", "iceland*", "northern cyprus*", "vanuat*", "barbad*",
"french polynesi*", "new caledoni*", "abkhaz*", "são tomé", "samoa*", "saint lucia*",
"guam", "curaça*", "artsakh*", "kiribat*", "grenad*", "aruba", "saint vincent and the grenadines*",
"saint vincentian*", "jersey*", "micronesi*", "u s virgin islands*", "tonga*", "antigua and barbuda*",
"antiguan", "barbudan", "seychell*", "isle of man", "manx", "andorr*",
"dominica*", "cayman*", "bermud*", "guerns*", "american samoa*", "northern mariana islands*",
"greenlan*", "marshall island*", "saint kitts and nevis*", "kittian*", "nevisian*",
"ossetia*", "faroe*", "turks and caicos islands*", "maarten*",  "liechtenstein*",
"monac*", "saint martin*",  "gibralta*", "san marino*", "sammarinese*",
"åland*", "british virgin islands*", "palau*", "cook islands*",
"anguill*", "nauru*", "wallis and futuna*", "wallisian", "futunan",
"tuvalu*", "saint barth*", "saint helen*", "heleni*", "ascension*", "tristan da cunha*",
"tristia*",  "saint pierre and miquelon*", "saint-pierrais*", "montserrat*",
"falkland islands*", "christmas island*", "norfolk island*", "niue*",
"tokelau*", "vatican*", "cocos keeling islands*", "pitcairn islands*",
"asia", "asian", "europe*", "africa", "african")
fox_countries <- na.omit(fox_countries)
fox_countries <- str_extract(fox_string, eng_countries)
fox_countries <- na.omit(fox_countries)
fox_countries_18_nov <- data_frame(fox_countries)
View(fox_countries_18_nov)
str_count(fox_string, eng_countries)
count <- str_count(fox_string, eng_countries)
fox_countries_18_nov <- data_frame(count)
View(fox_countries_18_nov)
countries_df <- data_frame(eng_countries)
fox_countries <- data_frame(count)
count_countries <- cbind(eng_countries, count)
View(count_countries)
count_countries %>%
filter(count > 0)
count_countries %>%
dplyr::filter(count > 0)
count_countries %>%
dplyr::filter(count == 0)
count_countries
count_countries <- cbind(eng_countries, count)
count_countries
count_countries
View(count_countries)
library(tidyverse)
count_countries %>%
filter(count > 0)
count_countries <- data_frame(count_countries)
count_countries %>%
filter(count > 0)
count_countries2 <-  count_countries %>%
filter(count > 0)
View(count_countries2)
count_countries2 <-  count_countries %>%
filter(count > 0)
View(count_countries2)
View(count_countries)
count <- str_count(fox_string, eng_countries)
fox_countries <- data_frame(count)
countries_df <- data_frame(eng_countries)
count_countries <- cbind(eng_countries, count)
count_countries <- data_frame(count_countries)
View(count_countries)
fox_countries <- str_extract(fox_string, eng_countries)
count <- str_count(fox_string, eng_countries)
fox_countries <- data_frame(count)
countries_df <- data_frame(eng_countries)
count_countries1 <- cbind(eng_countries, count)
count_countries2 <- data_frame(count_countries1)
View(count_countries2)
count_countries1 <- cbind(eng_countries, count)
View(count_countries1)
count_countries2 <-  count_countries1 %>%
filter(count > 0)
count <- as.numeric(count)
fox_countries <- str_extract(fox_string, eng_countries)
count <- str_count(fox_string, eng_countries)
count <- as.numeric(count)
fox_countries <- data_frame(count)
countries_df <- data_frame(eng_countries)
count_countries1 <- cbind(eng_countries, count)
View(count_countries1)
count_countries1 <- as.numeric(count_countries1$count)
count_countries2 <-  count_countries1 %>%
filter(count != 0)
install.packages("blogdown")
blogdown::install_hugo()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(polite,
rvest,
tidyverse,
utils,
haven,
lubridate,
RSelenium)
links_faz <- read_csv("./FAZ-URLs.csv") %>% as.list() %>% unlist()
faz_scaper <- function(x) {
headlines <- read_html(x) %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all('//a[contains(@rel, "nofollow")]') %>%
html_text()
Sys.sleep(30)
}
headlines_faz <- map(links_faz, faz_scaper) %>%
unlist() %>%
as.data.frame()
library(sf)
library(tidyverse)
setwd("~/Documents/GitHub/Final_Data_Science_Project/Map file")
# Copy the shapefile hyperlink from Natural Earth (naturalearthdata.org) into an object in R
# world_file <- "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
# Download .zip
# download.file(world_file, destfile = "WORLD.zip")
# Unzip the file
# unzip("WORLD.zip")
# Examine the file .zip file to find the shapefile
# list.files()
# Save the shapefile as a data frame using the read_sf() function
world <- sf::read_sf("ne_50m_admin_0_countries.shp") #Look for the .shp
world2 <- world %>%
mutate(ADMIN2 = ADMIN) %>%
select(TYPE, POP_EST, INCOME_GRP, CONTINENT, geometry, ADMIN2)
setwd("~/Documents/GitHub/Final_Data_Science_Project/Country lists")
eng_countries <- c("china","chinese*", "india*", "indian", "united states", "united states", "america*",
"indonesia*", "pakistan*", "brazil*", "nigeria",  "nigerian", "bangladesh*",
"russia*", "russian",
"mexic*",  "japan*", "ethiopia*", "philippine*", "filipino*",
"egypt*", "vietnam*", "congo*", "iran*", "turkey*", "turkish", "german*",
"france", "french*", "united kingdom", "uk", "england", "britain", "britains",
"scotland", "scotland", "scottish", "scottish", "wales", "welsh",
"thailand", "thailands", "thai", "south africa*", "tanzan*", "italy", "italys",
"italian", "italians", "myanmar*",
"burmese", "south korea", "korea*", "colombia*", "kenya*", "spain*", "spanish*",
"argentin*", "algeria*", "sudan*", "uganda*", "ukrain*", "iraq", "iraqi",
"canad*", "poland*", "polish*", "morocc*", "uzbekist*", "saudi arabia*",
"arabia*", "peru", "peruvian", "afghanistan", "afghanistani", "afghan", "afghani",
"malaysia", "malaysian", "angola*",
"mozambi*",
"ghana", "ghanaian", "yemen*", "nepal*", "venezuel*", "ivory coast*", "divoire*",
"madagascar*", "malagas*", "australia", "australian", "north korea*", "cameroon*",
"niger", "nigers", "taiwa*", "sri lanka*", "lanka*", "burkin*",
"mali", "malian", "chile", "chilian", "romania*", "kazakhst*", "malawi*", "malawian",
"zambia*", "syria*", "ecuador*", "netherlan*", "dutch*", "seneg*",
"guatema*", "chad", "chadian", "somali*", "zimbab*", "cambodi*", "south sudan*",
"rwand*", "guinea*", "burund*", "benin*", "bolivi*", "tunisia*",
"haiti*", "belgi*", "cuba*", "jordan*", "greece*", "greek*", "czech*",
"dominican republ*", "dominic*", "sweden*", "swed*", "portug*",
"azerbaij*", "hungar*", "tajikist*", "united arab emirates*", "emirat*",
"hondur*", "israel*", "belaru*", "papua new guinea*", "papua*",
"austria", "switzer*", "swiss*", "sierra leone*", "leon*", "togo", "togolese",
"hong kong*", "kong*", "paragu*", "laos", "laotian", "libya", "libyan", "bulgar*",
"serbia", "serb", "el salvador", "salvador*", "leban*", "kyrgyzst*",
"nicarag*", "turkmenist*", "denmark*", "danish*", "congo*",
"central african republic*", "central african*", "finland", "finlands", "finn", "finnish",
"slovak*", "singapor*", "norway", "norwegian", "palestin*", "costa rica*", "new zealand*",
"ireland*", "irish*", "liberi*", "oman", "omani", "kuwait*", "panama*",
"mauritan*", "croati*", "georgia*", "eritr*", "urugu*",
"mongoli*", "bosnia and herzegovina*", "bosni*", "puerto rico*",
"armeni*", "albani*", "lithuani*", "jamaic*", "moldov*", "namibia*",
"gambia*", "botswan*", "motswana", "qatar*", "gabon*", "lesotho*", "mosotho",
"basotho", "sloveni*", "north macedonia*", "macedoni*", "latvi*",
"kosov*", "guinea bissau*", "bissau-guinean*", "equatorial guinea",
"equatoguinean*", "bahrai*", "trinidad and tobago*", "trinidad*", "tobagoni*",
"estoni*", "east timor*", "timorian", "mauritius", "eswatini*", "emaswat*", "liswat*",
"djibout*", "fiji*", "cypr*", "comoros*", "bhuta*", "guyan*", "solomon islands*",
"macau*", "macanese*", "macao", "luxembourg*", "montenegr*", "western sahara*", "surinam*",
"cape verd*", "cabo verd*", "malta*", "maltese*", "transnistr*", "brunei*", "belize", "belizean",
"baham*", "maldiv*", "iceland*", "northern cyprus*", "vanuat*", "barbad*",
"french polynesi*", "new caledoni*", "abkhaz*", "são tomé", "samoa*", "saint lucia*",
"guam", "curaça*", "artsakh*", "kiribat*", "grenad*", "aruba", "saint vincent and the grenadines*",
"saint vincentian*", "jersey*", "micronesi*", "u s virgin islands*", "tonga*", "antigua and barbuda*",
"antiguan", "barbudan", "seychell*", "isle of man", "manx", "andorr*",
"dominica*", "cayman*", "bermud*", "guerns*", "american samoa*", "northern mariana islands*",
"greenlan*", "marshall island*", "saint kitts and nevis*", "kittian*", "nevisian*",
"ossetia*", "faroe*", "turks and caicos islands*", "maarten*",  "liechtenstein*",
"monac*", "saint martin*",  "gibralta*", "san marino*", "sammarinese*",
"åland*", "aland", "british virgin islands*", "palau*", "cook islands*",
"anguill*", "nauru*", "wallis and futuna*", "wallisian", "futunan",
"tuvalu*", "saint barth*", "saint helen*", "heleni*", "ascension*", "tristan da cunha*",
"tristia*",  "saint pierre and miquelon*", "saint-pierrais*", "montserrat*",
"falkland islands*", "christmas island*", "norfolk island*", "niue*",
"tokelau*", "vatican*", "cocos keeling islands*", "pitcairn islands*",
"asia", "asian", "europe*", "africa", "african",
"south georgia and the islands", "british indian ocean territory", "somaliland",
"são tomé and principe", "french southern and antarctic lands", "indian ocean territories",
"heard island and mcdonald islands", "ashmore and cartier islands", "siachen glacier", "antarctica",
"washington", "new york", "berlin", "paris", "london", "brussels", "rome", "dublin",
"belfast", "canberra",
"sydney", "wellington", "auckland")
ADMIN2 <- c("China","China", "India", "India", "United States of America", "United States of America",
"United States of America",
"Indonesia", "Pakistan", "Brazil", "Nigeria",  "Nigeria", "Bangladesh", "Russia", "Russia",
"Mexico",  "Japan", "Ethiopia", "Philippines", "Philipines",
"Egypt", "Vietnam", "Democratic Republic of the Congo", "Iran", "Turkey", "Turkey",
"Germany", "France", "France*", "United Kingdom", "United Kingdom", "United Kingdom",
"United Kingdom", "United Kingdom", "United Kingdom", "United Kingdom", "United Kingdom",
"United Kingdom", "United Kingdom", "United Kingdom",
"Thailand", "Thailand", "Thailand", "South Africa", "United Republic of Tanzania", "Italy", "Italy",
"Italy", "Italy", "Myanmar",
"Myanmar", "South Korea", "South Korea", "Colombia", "Kenya", "Spain", "Spain",
"Argentina", "Algeria", "Sudan", "Uganda", "Ukraine", "Iraq", "Iraq",
"Canada", "Poland", "Poland", "Morocco", "Uzbekistan", "Saudi Arabia",
"Saudi Arabia", "Peru", "Peru", "Afghanistan", "Afghanistan", "Afghanstan", "Afghanstan",
"Malaysia", "Malaysia", "Angola", "Mozambique",
"Ghana", "Ghana", "Yemen", "Nepal", "Venezuela", "Ivory Coast", "Ivory Coast",
"Madagascar", "Madagascar", "Australia", "Australia", "North Korea", "Cameroon",
"Niger", "Niger", "Taiwan", "Sri Lanka", "Sri Lanka", "Burkina Faso",
"Mali", "Mali", "Chile", "Chile", "Romania", "Kazakhstan", "Malawi", "Malawi",
"Zambia", "Syria", "Ecuador", "Netherlands", "Netherlands", "Senegal",
"Guatemala", "Chad", "Chad", "Somalia", "Zimbabwe", "Cambodia", "South Sudan",
"Rwanda", "Guinea", "Burundi", "Benin", "Bolivia", "Tunisia",
"Haiti", "Belgium", "Cuba", "Jordan", "Greece", "Greece*", "Czechia",
"Dominican Republic", "Dominican Rpublic", "Sweden", "Sweden", "Portugal",
"Azerbaijan", "Hungary", "Tajikistan", "United Arab Emirates", "United Arab Emirates",
"Honduras", "Israel", "Belarus", "Papua New Guinea*", "Papua New Guinea",
"Austria", "Switzerland", "Switzerland", "Sierra Leone*", "Sierra Leone",
"Togo", "Togo",
"Hong Kong S.A.R.", "Hong Kong S.A.R.", "Paraguay", "Laos", "Loas", "Libya", "Libya", "Bulgaria",
"Republic of Serbia", "Republic of Serbia", "El Salvador", "El Salvador", "Lebanon", "Kyrgyzstan",
"Nicaragua", "Turkmenistan", "Denmark", "Danmark", "Republic of the Congo",
"Central African Republic", "Central African Republic", "Finland", "Finland", "Finland",
"Finland",
"Slovakia", "Singapore", "Norway", "Norway", "Palestine", "Costa Rica", "New Zealand",
"Ireland", "Ireland", "Liberia", "Oman", "Oman", "Kuwait", "Panama",
"Mauritania", "Croatia", "Georgia", "Eritrea", "Uruguay",
"Mongolia", "Bosnia and Herzegovina", "Bosnia and Herzegovina", "Puerto Rico",
"Armenia", "Albania", "Lithuania", "Jamaica", "Moldova", "Namibia",
"Gambia", "Botswana", "Botswana", "Qatar", "Gabon", "Lesotho", "Lesotho",
"Lesotho", "Slovenia", "North Macedonia", "North Macedonia", "Latvia",
"Kosovo", "Guinea-Bissau", "Guinea-Bissau", "Equatorial Guinea",
"Equatorial Guinea", "Bahrain", "Trinidad and Tobago", "Trinidad and Tabago",
"Trinidad and Tobago",
"Estonia", "East Timor", "East Timor", "Mauritius", "eSwatini", " eSwatini ", " eSwatini ",
"Djibouti", "Fiji", "Cyprus", "Comoros", "Bhutan", "Guyana", "Solomon Islands",
"Macao S.A.R", "Macau S.A.R", "Macau S.A.R", "Luxembourg", "Montenegro", "Western Sahara", "Suriname",
"Cape Verde", "Cabo Verde", "Malta", "Malta", "Transnistria", "Brunei", "Belize", "Belize",
"The Bahamas", "Maldives", "Iceland", "Northern Cyprus", "Vanuatu", "Barbados",
"French Polynesia", "New Caledonia", "Abkhazia", "São Tomé", "Samoa", "Saint Lucia",
"Guam", "Curaçao", "Artsakh", "Kiribati", "Grenada", "Aruba",
"Saint Vincent and the Grenadines",
"Saint Vincent and the Grenadines", "Jersey", "Federated States of Micronesia", "United States Virgin Islands",
"Tonga", "Antigua and Barbuda",
"Antigua and Barbuda", "Antigua and Barbuda", "Seychelles", "Isle of Man",
"Isle of Man", "Andorra",
"Dominica", "Cayman Islands", "Bermuda", "Guernsey", "American Samoa", "Northern Mariana Islands",
"Greenland", "Marshall Islands", "Saint Kitts and Nevis", "Saint Kitts and Nevis",
"Saint Kitts and Nevis",
"Ossetia", "Faroe Islands", "Turks and Caicos Islands", "Sint Maarten",  "Liechtenstein",
"Monaco", "Saint Martin",  "Gibralta", "San Marino", "San Marino",
"Aland", "Aland", "British Virgin Islands", "Palau", "Cook Islands",
"Anguilla", "Nauru", "Wallis and Futuna*", "Wallis and Futuna", "Wallis and Futuna",
"Tuvalu", "Saint Barthelemy", "Saint Helena", "Saint Helena", "Ascension",
"Tristan da Cunha",
"Tristan da Cunha",  "Saint Pierre and Miquelon", "Saint Pierre and Miquelon", "Montserrat",
"Falkland Islands", "Christmas Island", "Norfolk Island", "Niue",
"Tokelau", "Vatican", "Cocos Keeling Islands", "Pitcairn Islands",
"Asia", "Asia", "Europe", "Africa", "Africa",
"South Georgia and the Islands", "British Indian Ocean Territory", "Somaliland", "São Tomé and Principe",
"French Southern and Antarctic Lands", "Indian Ocean Territories", "Heard Island and McDonald Islands",
"Ashmore and Cartier Islands", "Siachen Glacier", "Antarctica", "United States of America", "United States of America", "Germany", "France", "United Kingdom",
"Belgium", "Italy", "Ireland", "United Kingdom", "Australia", "Australia", "New Zealand", "New Zealand")
eng_countries_df <- data_frame(eng_countries)
admin <- data_frame(ADMIN2)
eng_countries_full <- cbind(admin, eng_countries_df)
library(tidyverse)
library(dplyr)
library(leaflet)
library(pals)
library(htmlwidgets)
library(sf)
#Set working directory
setwd("~/Documents/GitHub/Final_Data_Science_Project/Daily Scraping")
#Import dataset
dominion_post_headlines <- read_csv("dominon_post_headlines.csv")
headlines <- nrow(dominion_post_headlines)
#Loaded dominion_post_headlines csv, then put words into one vector
dominion_post_string <- str_c(dominion_post_headlines, collapse = " ")
#Make all words lower-case
dominion_post_string <- tolower(dominion_post_string)
#Remove punctuation and digits
dominion_post_string <- str_replace_all(dominion_post_string, "[[:punct:]]", " ")
dominion_post_string <- str_replace_all(dominion_post_string, "[[:digit:]]", " ")
dominion_post_string
#Count number of matches between headlines and list of countries
count <- str_count(dominion_post_string, eng_countries)
#Make value into dataframe
dominion_post_countries <- data_frame(count)
#Combine this dataframe with countries dataframe (see: eng_countries script)
dominion_post_countries1 <- cbind(eng_countries_full, dominion_post_countries)
#Make sure count is numeric
dominion_post_countries1$count <- as.numeric(dominion_post_countries1$count)
#left_join dataframes: countries2 and world3 (see world_shape_df script)
combined_ref_dominion_post <- left_join(x = world2,
y = dominion_post_countries1,
by = "ADMIN2")
#Combine all country reference information into single values (ie aghani + anghan => Afghanistan)
dominion_post_map <- combined_ref_dominion_post %>%
group_by(ADMIN2, CONTINENT, INCOME_GRP) %>%
summarise(count = sum(count)) %>%
mutate(rate = (count/headlines)*100) %>%
add_column(source = "dominion Post") %>%
add_column(source_country = "New Zealand") %>%
add_column(orientation = "Center") %>%
dplyr::filter(count > 0) %>%
filter(ADMIN2 != "New Zealand")
View(dominion_post_map)
write.table(dominion_post_map, "~/Documents/GitHub/Final_Data_Science_Project/News source df's/dominion_post_map.csv", row.names = FALSE, col.names = TRUE)
