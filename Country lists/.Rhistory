legislator_df <-
left_join(political_df, sessions_served_df, by = "pageid") %>%
left_join(traffic_df, by = "pageid")
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
browser()
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
# compute age
get_age <- function(birth, date_at) {
browser()
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
browser()
date_at_fmt <- date_at
browser()
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
# compute age
get_age <- function(birth, date_at) {
browser()
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
View(get_age)
browser()
library(WDI)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(patchwork)
library(hrbrthemes)
library(gridExtra)
library(labelled)
library(readr)
library(directlabels)
life_expectancy_vs_health_expenditure <- read_csv("life-expectancy-vs-health-expenditure.csv")
df_2015 <- life_expectancy_vs_health_expenditure %>%
filter(Year == 2015) %>%
drop_na() %>%
rename(health_expen = 'Health Expenditure and Financing (per capita) (OECDstat (2017))',
life_expec = 'Life expectancy at birth, total (years)',
pop = 'Total population (Gapminder, HYDE & UN)',
country = 'Entity') %>%
filter(country != "Turkey" & country != "Latvia") %>%
mutate(health_expen = as.numeric(health_expen))
plot_2a <- ggplot(df_2015, aes(x = health_expen,
y = life_expec,
color = Continent,
size = pop)) +
geom_point() +
ggtitle("Life expectancy vs. health expenditure, 2015") +
scale_y_continuous(name = "Life expectancy",
breaks = c(68,70,72,74,76,78,80,82)) +
scale_x_continuous(name = "Health expenditure (2010 int.-$)",
breaks = c(1000,2000,3000,4000,5000,6000,7000,8000)) +
geom_text(aes(label = country, hjust=0, vjust=1)) +
theme_minimal() + guides(size = FALSE)
plot_2a
df_whole <- life_expectancy_vs_health_expenditure %>%
rename(health_expen = 'Health Expenditure and Financing (per capita) (OECDstat (2017))',
life_expec = 'Life expectancy at birth, total (years)',
pop = 'Total population (Gapminder, HYDE & UN)',
country = 'Entity') %>%
filter(country != "Turkey" & country != "Latvia") %>%
filter(!is.na(health_expen)) %>%
fill(Continent, .direction = "up")%>%
mutate(health_expen = as.numeric(health_expen))
plot_2b <- ggplot(df_whole, aes(x = health_expen,
y = life_expec, fill = country, color = Continent)) +
geom_line() + geom_point() + geom_dl(aes(label = country), method = list(dl.combine("last.points")), cex = 0.8) +
ggtitle("Life expectancy vs. health expenditure, 1970 - 2015") +
scale_y_continuous(name = "Life expectancy",
breaks = c(68,70,72,74,76,78,80,82)) +
scale_x_continuous(name = "Health expenditure (2010 int.-$)",
breaks = c(1000,2000,3000,4000,5000,6000,7000,8000)) +
theme_minimal() + guides(fill = FALSE)
plot_2b
ggsave(file = "plot_2a.png", plot_2a)
ggsave(file = "plot_2a.pdf", plot_2a)
plot_2b
ggsave(file = "plot_2b.png", plot_2b)
ggsave(file = "plot_2b.pdf", plot_2b)
install.packages("shiny")
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
View(ui)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
View(ui)
fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage("Hello World")
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInout(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
shinyApp(ui = ui, server = server)
ui <-
fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
View(server)
View(ui)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runApp(“newdir”)
library(shiny)
runApp(“newdir”)
install.packages("runApp")
runApp(“newdir”)
runApp(newdir)
runApp("newdir")
runApp(“newdir”)
library(readr)
boost <- read_csv("Desktop/Research BOOST II/boost.csv")
View(boost)
install.packages("miniUI")
library(miniUI)
install.packages("shinyFiles")
install.packages("cronR")
install.packages("countrycode")
countryname(sourcevar, destination = "country.name", warn = TRUE)
library(countrycode)
countryname(sourcevar, destination = "country.name", warn = TRUE)
countryname(sourcevar, destination = "country.name", warn = TRUE)
countryname("New Zealand", destination = "country.name", warn = TRUE)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runApp('Documents/GitHub/shiny.rstudio.com-tutorial/Shiny practice.R')
shinyApp(ui = ui, server = server)
library(pacman)
pacman::p_load(sf, leaflets, readxl,
dplyr, qtm, ggplot2, rvest, tidyverse,
raster,  tmap, tmaptools)
#raster is for mac
options(scipen = 999)
# Copy the shapefile hyperlink from Natural Earth (naturalearthdata.org) into an object in R
world_file <- "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
# Download .zip
download.file(world_file, destfile = "WORLD.zip")
# Unzip the file
unzip("WORLD.zip")
# Examine the file .zip file to find the shapefile
list.files()
# Save the shapefile as a data frame using the read_sf() function
world <- sf::read_sf("ne_50m_admin_0_countries.shp") #Look for the .shp
world
countries
ggplot() + geom_sf(data = world) + coord_sf(crs = st_crs(4326)) + theme_minimal()
tm_shape(world) +
tm_fill()
tmap_mode("view")
tmap_last()
pacman::p_load(sf, leaflet, readxl,
dplyr, qtm, ggplot2, rvest, tidyverse,
raster,  tmap, tmaptools)
library(pacman)
pacman::p_load(sf, leaflet, readxl,
dplyr, ggplot2, rvest, tidyverse,
raster,  tmap, tmaptools)
#raster is for mac
options(scipen = 999)
tmap_last()
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron")
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(label = labels)
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(stroke = FALSE)
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron")
library(readr)
fox_news_headlines <- read_csv("Documents/GitHub/Final_Data_Science_Project/fox_news_headlines.csv")
View(fox_news_headlines)
#Put words into one vector
fox_string <- str_c(fox_news_headlines, collapse = " ")
#Make all words lower-case
fox_string <- tolower(fox_string)
fox_string
#Remove punctuation and digits
fox_string <- str_replace_all(fox_string, "[[:punct:]]", " ")
fox_string <- str_replace_all(fox_string, "[[:digit:]]", " ")
fox_string
fox_countries <- str_extract(fox_string, eng_countries)
eng_countries <- c("china","chinese*", "india*", "united states", "america*",
"indonesia*", "pakistan*", "brazil*", "nigeria",  "nigerian", "bangladesh*", "russia*",
"mexic*",  "japan*", "ethiopia*", "philippine*", "filipino*",
"egypt*", "vietnam*", "congo*", "iran*", "turkey*", "turkish", "german*",
"france", "french*", "united kingdom", "uk", "england", "britain", "britains",
"thailand", "thailands", "thai", "south africa*", "tanzan*", "italy", "italys",
"italian", "italians", "myanmar*",
"burmese", "south korea", "korea*", "colombia*", "kenya*", "spain*", "spanish*",
"argentin*", "algeria*", "sudan*", "uganda*", "ukrain*", "iraq", "iraqi",
"canad*", "poland*", "polish*", "morocc*", "uzbekist*", "saudi arabia*",
"arabia*", "peru", "peruvian", "afghanistan", "afghanistani", "afghan", "afghani",
"malaysia", "malaysian", "angola*",
"mozambi*",
"ghana", "ghanaian", "yemen*", "nepal*", "venezuel*", "ivory coast*", "divoire*",
"madagascar*", "malagas*", "australia", "australian", "north korea*", "cameroon*",
"niger", "nigers", "taiwa*", "sri lanka*", "lanka*", "burkin*",
"mali", "malian", "chile", "chilian", "romania*", "kazakhst*", "malawi*", "malawian",
"zambia*", "syria*", "ecuador*", "netherlan*", "dutch*", "seneg*",
"guatema*", "chad", "chadian", "somali*", "zimbab*", "cambodi*", "south sudan*",
"rwand*", "guinea*", "burund*", "benin*", "bolivi*", "tunisia*",
"haiti*", "belgi*", "cuba*", "jordan*", "greece*", "greek*", "czech*",
"dominican republ*", "dominic*", "sweden*", "swed*", "portug*",
"azerbaij*", "hungar*", "tajikist*", "united arab emirates*", "emirat*",
"hondur*", "israel*", "belaru*", "papua new guinea*", "papua*",
"austria", "switzer*", "swiss*", "sierra leone*", "leon*", "togo", "togolese",
"hong kong*", "kong*", "paragu*", "laos", "laotian", "libya", "libyan", "bulgar*",
"serbia", "serb", "el salvador", "salvador*", "leban*", "kyrgyzst*",
"nicarag*", "turkmenist*", "denmark*", "danish*", "congo*",
"central african republic*", "central african*", "finland", "finlands", "finn", "finnish",
"slovak*", "singapor*", "norway", "norwegian", "palestin*", "costa rica*", "new zealand*",
"ireland*", "irish*", "liberi*", "oman", "omani", "kuwait*", "panama*",
"mauritan*", "croati*", "georgia*", "eritr*", "urugu*",
"mongoli*", "bosnia and herzegovina*", "bosni*", "puerto rico*",
"armeni*", "albani*", "lithuani*", "jamaic*", "moldov*", "namibia*",
"gambia*", "botswan*", "motswana", "qatar*", "gabon*", "lesotho*", "mosotho",
"basotho", "sloveni*", "north macedonia*", "macedoni*", "latvi*",
"kosov*", "guinea bissau*", "bissau-guinean*", "equatorial guinea",
"equatoguinean*", "bahrai*", "trinidad and tobago*", "trinidad*", "tobagoni*",
"estoni*", "east timor*", "timorian", "maurit*", "eswatini*", "emaswat*", "liswat*",
"djibout*", "fiji*", "cypr*", "comoros*", "bhuta*", "guyan*", "solomon islands*",
"macau*", "macanese*", "luxembourg*", "montenegr*", "western sahara*", "surinam*",
"cape verd*", "malta*", "maltese*", "transnistr*", "brunei*", "belize", "belizean",
"baham*", "maldiv*", "iceland*", "northern cyprus*", "vanuat*", "barbad*",
"french polynesi*", "new caledoni*", "abkhaz*", "são tomé", "samoa*", "saint lucia*",
"guam", "curaça*", "artsakh*", "kiribat*", "grenad*", "aruba", "saint vincent and the grenadines*",
"saint vincentian*", "jersey*", "micronesi*", "u s virgin islands*", "tonga*", "antigua and barbuda*",
"antiguan", "barbudan", "seychell*", "isle of man", "manx", "andorr*",
"dominica*", "cayman*", "bermud*", "guerns*", "american samoa*", "northern mariana islands*",
"greenlan*", "marshall island*", "saint kitts and nevis*", "kittian*", "nevisian*",
"ossetia*", "faroe*", "turks and caicos islands*", "maarten*",  "liechtenstein*",
"monac*", "saint martin*",  "gibralta*", "san marino*", "sammarinese*",
"åland*", "british virgin islands*", "palau*", "cook islands*",
"anguill*", "nauru*", "wallis and futuna*", "wallisian", "futunan",
"tuvalu*", "saint barth*", "saint helen*", "heleni*", "ascension*", "tristan da cunha*",
"tristia*",  "saint pierre and miquelon*", "saint-pierrais*", "montserrat*",
"falkland islands*", "christmas island*", "norfolk island*", "niue*",
"tokelau*", "vatican*", "cocos keeling islands*", "pitcairn islands*",
"asia", "asian", "europe*", "africa", "african")
fox_countries <- na.omit(fox_countries)
fox_countries <- str_extract(fox_string, eng_countries)
fox_countries <- na.omit(fox_countries)
fox_countries_18_nov <- data_frame(fox_countries)
View(fox_countries_18_nov)
str_count(fox_string, eng_countries)
count <- str_count(fox_string, eng_countries)
fox_countries_18_nov <- data_frame(count)
View(fox_countries_18_nov)
countries_df <- data_frame(eng_countries)
fox_countries <- data_frame(count)
count_countries <- cbind(eng_countries, count)
View(count_countries)
count_countries %>%
filter(count > 0)
count_countries %>%
dplyr::filter(count > 0)
count_countries %>%
dplyr::filter(count == 0)
count_countries
count_countries <- cbind(eng_countries, count)
count_countries
count_countries
View(count_countries)
library(tidyverse)
count_countries %>%
filter(count > 0)
count_countries <- data_frame(count_countries)
count_countries %>%
filter(count > 0)
count_countries2 <-  count_countries %>%
filter(count > 0)
View(count_countries2)
count_countries2 <-  count_countries %>%
filter(count > 0)
View(count_countries2)
View(count_countries)
count <- str_count(fox_string, eng_countries)
fox_countries <- data_frame(count)
countries_df <- data_frame(eng_countries)
count_countries <- cbind(eng_countries, count)
count_countries <- data_frame(count_countries)
View(count_countries)
fox_countries <- str_extract(fox_string, eng_countries)
count <- str_count(fox_string, eng_countries)
fox_countries <- data_frame(count)
countries_df <- data_frame(eng_countries)
count_countries1 <- cbind(eng_countries, count)
count_countries2 <- data_frame(count_countries1)
View(count_countries2)
count_countries1 <- cbind(eng_countries, count)
View(count_countries1)
count_countries2 <-  count_countries1 %>%
filter(count > 0)
count <- as.numeric(count)
fox_countries <- str_extract(fox_string, eng_countries)
count <- str_count(fox_string, eng_countries)
count <- as.numeric(count)
fox_countries <- data_frame(count)
countries_df <- data_frame(eng_countries)
count_countries1 <- cbind(eng_countries, count)
View(count_countries1)
count_countries1 <- as.numeric(count_countries1$count)
count_countries2 <-  count_countries1 %>%
filter(count != 0)
install.packages("blogdown")
blogdown::install_hugo()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(polite,
rvest,
tidyverse,
utils,
haven,
lubridate,
RSelenium)
links_faz <- read_csv("./FAZ-URLs.csv") %>% as.list() %>% unlist()
faz_scaper <- function(x) {
headlines <- read_html(x) %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all('//a[contains(@rel, "nofollow")]') %>%
html_text()
Sys.sleep(30)
}
headlines_faz <- map(links_faz, faz_scaper) %>%
unlist() %>%
as.data.frame()
ger_countries <- c("china","chinesisch*", "indien", "indisch*", "vereinigte staaten", "usa", "amerika*",
"indonesien*", "pakistan*", "brasilien*", "nigeria", "nigerianisch*",
"bangladesch*", "russland*", "russisch*",
"mexik*", "japan*", "äthiopien*", "philippinen*", "philippinisch*",
"ägypt*", "vietnam*", "kongo*", "iran*", "türkei*", "türkisch", "deutsch*",
"frankreich", "französisch*", "großbritannien", "großbritannien", "england",
"großbritannien", "großbritannien",
"schottland", "schottland", "schottisch", "schottisch", "wales", "walisisch*",
"thailand", "thailand", "thailädisch*", "südafrika*", "tanzan*", "italien", "italien",
"italiener", "italiener", "myanmar*",
"birmanisch*", "südkorea", "korea*", "kolumbien*", "kenia*", "spanien*", "spanisch*",
"argentinien*", "algerien*", "sudan*", "uganda*", "ukrain*", "irak", "irakisch",
"kanada*", "polen*", "polnisch*", "marokk*", "usbekist*", "saudi-arabien*",
"arabien*", "peru", "peruanisch", "afghanistan", "afghanistan", "afghanisch", "afghani",
"malaysia", "malaysisch", "angola*",
"mosambik*",
"ghana", "ghanaisch", "jemen*", "nepal*", "venezola*", "elfenbeinküste*", "divoire*",
"madagaskar*", "madagas*", "australien", "australier", "nordkorea*", "kamerun*",
"niger", "nigers", "taiwa*", "sri lanka*", "lanka*", "burkin*",
"mali", "malisch*", "chile", "chilian", "rumänien*", "kasachst*", "malawi*", "malawisch",
"sambia*", "syrien*", "ecuador*", "niederlande*", "niederländisch*", "seneg*",
"guatema*", "tschad", "tschadisch", "somali*", "zimbab*", "cambodi*", "südsudan*",
"rwand*", "guinea*", "burund*", "benin*", "bolivi*", "tunesien*",
"haiti*", "belgien*", "kuba*", "jordanien*", "griechenland*", "griechisch*", "tschechisch*",
"dominikanische republik", "dominikanish*", "schweden*", "schwedisch*", "portug*",
"aserbaidsch*", "hungar*", "tadschikist*", "vereinigte arabische emirate*", "emirat*",
"hondur*", "israel*", "belaru*", "papua-neuguinea*", "papua*",
"österreich", "schweiz*", "schweizerisch*", "sierra leone*", "leon*", "togo", "togoisch*",
"hong kong*", "kong*", "paragu*", "laos", "laotisch*", "libya", "libyan", "bulgar*",
"serbien", "serbisch", "el salvador", "salvadorian*", "liban*", "kyrgyzst*",
"nikarag*", "turkmenist*", "dänemark*", "dänisch*", "kongo*",
"zentralafrikanische republik*", "zentralafrikanisches*", "finnland", "finnland", "finn", "finnisch",
"slowakisch*", "singapor*", "norwegen", "norwegisch", "palästina*", "costa rica*", "neuseeland*",
"irland*", "irisch*", "liberi*", "oman", "omanisch", "kuwait*", "panama*",
"mauritan*", "kroati*", "georgia*", "eritr*", "urugu*",
"mongoli*", "bosnien und herzegowina*", "bosni*", "puerto rico",
"armeni*", "albani*", "lithuani*", "jamaic*", "moldov*", "namibia*",
"gambia*", "botswan*", "motswana", "qatar*", "gabon*", "lesotho*", "mosotho",
"basotho", "sloveni*", "nordmazedonien*", "macedoni*", "latvi*",
"kosov*", "guinea bissau*", "bissau-guinean*", "äquatorialguinea",
"äquatoguineisch*", "bahrai*", "trinidad und tobago*", "trinidad*", "tobagoni*",
"estoni*", "osttimor*", "timorianer", "mauritius", "eswatini*", "emaswat*", "liswat*",
"djibout*", "fiji*", "cypr*", "comoren*", "bhuta*", "guyan*", "salomonen*",
"macau*", "macanese*", "macau", "luxemburg*", "montenegr*", "westsahara*", "surinam*",
"kap verd*", "kapverdisch*", "malta*", "malteser*", "transnistr*", "brunei*", "belize", "belizean",
"baham*", "maldiv*", "island*", "nordzypern*", "vanuat*", "barbad*",
"französisch-polynesien*", "neukaladon*", "abchasen*", "são tomé", "samoa*", "saint lucia*",
"guam", "curaça*", "artsakh*", "kiribat*", "grenad*", "aruba", "saint vincent und die grenadinen*",
"saint vincentian*", "jersey*", "micronesi*", "amerikanische jungferninseln", "tonga*",
"antigua und barbuda*",
"antiguan", "barbudan", "seychell*", "isle of man", "manx", "andorr*",
"dominica*", "cayman*", "bermud*", "guerns*", "amerikanisch-samoa*", "nördliche marianen*",
"grönland*", "marshall island*", "sint kitts and nevis*", "kittian*", "nevisian*",
"ossetia*", "faröer*", "türken- und caicosinseln*", "maarten*", "liechtenstein*",
"monac*", "sint martin*", "gibralta*", "san marino*", "sammarinese*",
"åland*", "aland", "britische jungferninseln*", "palau*", "cook Islands*", "anguill*", "nauru*", "wallis und futuna*", "wallisian", "futunan",
"tuvalu*", "saint barth*", "saint helen*", "heleni*", "ascension*", "tristan da cunha*",
"tristia*", "saint pierre und miquelon*", "saint-pierrais*", "montserrat*",
"falklandinseln*", "weihnachtsinsel*", "norfolkinsel*", "niue*",
"tokelau*", "vatican*", "cocos kieling islands*", "pitcairn islands*",
"asien", "asiatisch", "europa*", "afrika", "afrikanisch",
"südgeorgien und die inseln", "britisches territorium im indischen ozean", "somaliland",
"são tomé und principe", "französische südliche und antarktische länder",
"territorien des indischen ozeans",
"heard island und mcdonald islands", "ashmore und cartier islands", "siachen glacier", "antarktis",
"washington", "new york", "berlin", "paris", "london", "brüssel", "rom", "dublin",
"belfast", "canberra", "sydney", "wellington", "auckland")
setwd("~/Documents/GitHub/Final_Data_Science_Project/Country lists")
